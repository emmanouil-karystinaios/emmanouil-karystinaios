<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Emmanouil Karystinaios</title><link>https://emmanouil-karystinaios.github.io/</link><atom:link href="https://emmanouil-karystinaios.github.io/index.xml" rel="self" type="application/rss+xml"/><description>Emmanouil Karystinaios</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate><image><url>https://emmanouil-karystinaios.github.io/media/icon_hu4c3aa08d28a737b1b7fdd38226539d61_369298_512x512_fill_lanczos_center_3.png</url><title>Emmanouil Karystinaios</title><link>https://emmanouil-karystinaios.github.io/</link></image><item><title>Example Talk</title><link>https://emmanouil-karystinaios.github.io/talk/example-talk/</link><pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/talk/example-talk/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click on the &lt;strong>Slides&lt;/strong> button above to view the built-in slides feature.
&lt;/div>
&lt;/div>
&lt;p>Slides can be added in a few ways:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Create&lt;/strong> slides using Wowchemy&amp;rsquo;s &lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">&lt;em>Slides&lt;/em>&lt;/a> feature and link using &lt;code>slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Upload&lt;/strong> an existing slide deck to &lt;code>static/&lt;/code> and link using &lt;code>url_slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Embed&lt;/strong> your slides (e.g. Google Slides) or presentation video on this page using &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">shortcodes&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Further event details, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">page elements&lt;/a> such as image galleries, can be added to the body of this page.&lt;/p></description></item><item><title>Automatic Note-Level Score-to-Performance Alignments in the ASAP Dataset</title><link>https://emmanouil-karystinaios.github.io/publication/asap_tismir2023/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/asap_tismir2023/</guid><description/></item><item><title>Musical Voice Separation as Link Prediction: Modeling a Musical Perception Task as a Multi-Trajectory Tracking Problem</title><link>https://emmanouil-karystinaios.github.io/publication/vocsep_ijcai2023/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/vocsep_ijcai2023/</guid><description/></item><item><title>The ACCompanion: Combining Reactivity, Robustness, and Musical Expressivity in an Automatic Piano Accompanist</title><link>https://emmanouil-karystinaios.github.io/publication/accompanion_ijcai2023/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/accompanion_ijcai2023/</guid><description/></item><item><title>Cadence Detection in Symbolic Classical Music using Graph Neural Networks</title><link>https://emmanouil-karystinaios.github.io/publication/cadet_ismir2022/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/cadet_ismir2022/</guid><description/></item><item><title>partitura: A Python Package for Handling Symbolic Musical Data</title><link>https://emmanouil-karystinaios.github.io/publication/partitura/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/partitura/</guid><description/></item><item><title>The match file format: Encoding Alignments between Scores and Performances</title><link>https://emmanouil-karystinaios.github.io/publication/match/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/match/</guid><description/></item><item><title>Towards Quantifying Differences in Expressive Piano Performances: Are Euclidean-like Distance Measures Enough?</title><link>https://emmanouil-karystinaios.github.io/publication/performance/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/performance/</guid><description/></item><item><title>Slides</title><link>https://emmanouil-karystinaios.github.io/slides/example/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/slides/example/</guid><description>&lt;h2 id="on-performance-similarity-and-structure-segmentation">On Performance Similarity and Structure Segmentation&lt;/h2>
&lt;p>&lt;a href="emmanouil-karystinaios.netify.app">Emmanouil Karystinaios&lt;/a> | &lt;a href="emmanouil-karystinaios.netify.app">article&lt;/a>&lt;/p>
&lt;!-- [Wowchemy](https://wowchemy.com/) | [Documentation](https://owchemy.com/docs/managing-content/#create-slides) -->
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Our objective is to find a way to quantify similarity of performances for which we have a matched score.
But first, we have to answer the following questions :&lt;/p>
&lt;ul>
&lt;li>What is performance similarity&lt;/li>
&lt;li>How to measure siilarity in match scores?&lt;/li>
&lt;li>Which similarity metric to use ?&lt;/li>
&lt;li>Why measure performance similarity?&lt;/li>
&lt;li>What elements affect our perception of performance similarity?&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="self-similarity-matrices">Self-Similarity Matrices&lt;/h2>
&lt;p>The concept of self-similarity matrices is fundamental for
capturing structural properties of music recordings. Generally,
one starts with a feature space L containing the elements of
the feature sequence under consideration as well as with a
similarity measure $f : \mathcal{L} \times \mathcal{L} \to \mathbb{R}$.&lt;/p>
&lt;hr>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;ul>
&lt;li>Next: &lt;code>Right Arrow&lt;/code> or &lt;code>Space&lt;/code>&lt;/li>
&lt;li>Previous: &lt;code>Left Arrow&lt;/code>&lt;/li>
&lt;li>Start: &lt;code>Home&lt;/code>&lt;/li>
&lt;li>Finish: &lt;code>End&lt;/code>&lt;/li>
&lt;li>Overview: &lt;code>Esc&lt;/code>&lt;/li>
&lt;li>Speaker notes: &lt;code>S&lt;/code>&lt;/li>
&lt;li>Fullscreen: &lt;code>F&lt;/code>&lt;/li>
&lt;li>Zoom: &lt;code>Alt + Click&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://github.com/hakimel/reveal.js#pdf-export" target="_blank" rel="noopener">PDF Export&lt;/a>: &lt;code>E&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="interval-vectors">Interval Vectors&lt;/h2>
&lt;dl>
&lt;dt>&lt;strong>&lt;em>Definition&lt;/em>&lt;/strong>&lt;/dt>
&lt;dd>An interval vector is an array of natural numbers which summarize the intervals present in a set of pitch classes. There is an equivalence between complementary intervals within the octave for example $2^{nd}$ minor and $7^{nth}$ major intervals, etc.&lt;/dd>
&lt;/dl>
&lt;p>Examples :&lt;/p>
&lt;ul>
&lt;li>Any Major chord : $ [0, 0, 1, 1, 1, 0 ] $&lt;/li>
&lt;li>Any Minor chord : $ [0, 0, 1, 1, 1, 0 ] $&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="interval-vectors-and-cadences">Interval Vectors and Cadences&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Typical Cadences&lt;/strong>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>$\textrm{V}$ &amp;amp; - &amp;amp; $\textrm{I}$&lt;/td>
&lt;td>authentic&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$\textrm{I}$ &amp;amp; - &amp;amp; $\textrm{V}$&lt;/td>
&lt;td>half&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$\textrm{IV}$ &amp;amp; - &amp;amp; $\textrm{I}$&lt;/td>
&lt;td>plagal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>$\textrm{V}$ &amp;amp; - &amp;amp; $\textrm{VI}$&lt;/td>
&lt;td>deceptive&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Interval Vectors are commutative, i.e. $\textrm{V} \to \textrm{I} = \textrm{I} \to \textrm{V} $:&lt;/p>
&lt;ul>
&lt;li>$ (\textrm{V/I})_{maj} = [1, 2, 2, 2, 3, 0] $&lt;/li>
&lt;li>$ (\textrm{V/I})_{min} = [2, 1, 2, 3, 2, 0] $&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="code-highlighting">Code Highlighting&lt;/h2>
&lt;p>Inline code: &lt;code>variable&lt;/code>&lt;/p>
&lt;p>Code block:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">porridge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;blueberry&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">porridge&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;blueberry&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Eating...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;p>For every window $w_i^j$ we compute the interval vector of all notes in thye window/ Therefore, $\textrm{Int_Vec}(w_i^j)\in \mathbb{N}^6$.
$$
\mathcal(W) = \sum_{i=1}^N\sum_{j=1}^\nu \textrm{Int_Vec}(w_i^j)
$$
Then, let $\mathcal{X}$ be some matrix decomposition of $\mathcal{W}$. The SSM $\mathcal{S}$ of $\mathcal{X}$ is:
$$
\mathcal{S} = \frac{\mathcal{X} \cdot \mathcal{X}}{| \mathcal{X} |^2}
$$&lt;/p>
&lt;hr>
&lt;h2 id="test">Test&lt;/h2>
&lt;p>\begin{tikzpicture}
\matrix (m) [matrix of math nodes,row sep=3em,column sep=4em,minimum width=2em]
{
F &amp;amp; B \
&amp;amp; A \};
\path[-stealth]
(m-1-1) edge node [above] {$\beta$} (m-1-2)
(m-1-2) edge node [right] {$\rho$} (m-2-2)
(m-1-1) edge node [left] {$\alpha$} (m-2-2);
\end{tikzpicture}&lt;/p>
&lt;hr>
&lt;h2 id="fragments">Fragments&lt;/h2>
&lt;p>Make content appear incrementally&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">{{% fragment %}} One {{% /fragment %}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{% fragment %}} **Two** {{% /fragment %}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{% fragment %}} Three {{% /fragment %}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Press &lt;code>Space&lt;/code> to play!&lt;/p>
&lt;span class="fragment " >
One
&lt;/span>
&lt;span class="fragment " >
&lt;strong>Two&lt;/strong>
&lt;/span>
&lt;span class="fragment " >
Three
&lt;/span>
&lt;hr>
&lt;p>A fragment can accept two optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>: use a custom style (requires definition in custom CSS)&lt;/li>
&lt;li>&lt;code>weight&lt;/code>: sets the order in which a fragment appears&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="speaker-notes">Speaker Notes&lt;/h2>
&lt;p>Add speaker notes to your presentation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">{{% speaker_note %}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> Only the speaker can read these notes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> Press &lt;span class="sb">`S`&lt;/span> key to view
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{% /speaker_note %}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Press the &lt;code>S&lt;/code> key to view the speaker notes!&lt;/p>
&lt;aside class="notes">
&lt;ul>
&lt;li>Only the speaker can read these notes&lt;/li>
&lt;li>Press &lt;code>S&lt;/code> key to view&lt;/li>
&lt;/ul>
&lt;/aside>
&lt;hr>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;ul>
&lt;li>black: Black background, white text, blue links (default)&lt;/li>
&lt;li>white: White background, black text, blue links&lt;/li>
&lt;li>league: Gray background, white text, blue links&lt;/li>
&lt;li>beige: Beige background, dark text, brown links&lt;/li>
&lt;li>sky: Blue background, thin dark text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>night: Black background, thick white text, orange links&lt;/li>
&lt;li>serif: Cappuccino background, gray text, brown links&lt;/li>
&lt;li>simple: White background, black text, blue links&lt;/li>
&lt;li>solarized: Cream-colored background, dark green text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-noprocess data-shortcode-slide
data-background-image="blue_background.jpg"
>
&lt;h2 id="custom-slide">Custom Slide&lt;/h2>
&lt;p>Customize the slide style and background&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">background-image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/media/boards.jpg&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">background-color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#0000FF&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;my-style&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="custom-css-example">Custom CSS Example&lt;/h2>
&lt;p>Let&amp;rsquo;s make headers navy colored.&lt;/p>
&lt;p>Create &lt;code>assets/css/reveal_custom.css&lt;/code> with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h2&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">navy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="questions">Questions?&lt;/h1>
&lt;p>&lt;a href="https://github.com/wowchemy/wowchemy-hugo-modules/discussions" target="_blank" rel="noopener">Ask&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p></description></item><item><title>Harmonic Trajectories in the Tonnetz</title><link>https://emmanouil-karystinaios.github.io/post/tonnetz/</link><pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/post/tonnetz/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>The &lt;strong>PLR operations&lt;/strong> are the foundation of the Tonnetz.
They act on major and minor triads.&lt;br>
&lt;strong>Triad&lt;/strong> is any combination of any three distinct Pitch Classes. In the Neo-Riemannian theory the major and the minor triads are of interest that are equivalent to the groups ${n, ; n+4, ; n+7}$ &amp;amp; ${n, ; n+3, ; n+7 }$ accordingly, where $n \in \mathbb{Z}/12\mathbb{Z}$.
PLR stand for :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>P :&lt;/strong> Parallel.&lt;/li>
&lt;li>&lt;strong>L :&lt;/strong> Leading-Tone Exchange.&lt;/li>
&lt;li>&lt;strong>R :&lt;/strong> Relative.&lt;/li>
&lt;/ul>
&lt;p>These operations/ transformations are the principal transformations of the Neo-Riemmanian theory which was mainly conceived by David Lewin (1933–2003).
The mirror process is relative to the chord intervalic relations not the position of the shape in the circle.&lt;/p>
&lt;h4 id="plr-as-group-operations">PLR as Group Operations&lt;/h4>
&lt;p>The PLR group acts simply transitively on the set {$ n_M,n=0…11$} $\cup$ { $n_m,n=0…11 $} of the 24 major and minor triads, where $n_M$ (resp. $n_m$) represents a major (resp. minor) triad with root n in the usual semi-tone encoding of pitch classes.&lt;/p>
&lt;p>It is isomorphic to the dihedral group D24 of order 24, and is generated by the following two transformations.&lt;/p>
&lt;p>The transformation $L: \mathbb{Z} _{24} \to \mathbb{Z} _{24}$ is called the leading-tone operation, and is such that:&lt;/p>
&lt;p>$$
L(n_M)=(n+4)_m \textrm{ and the complementary } L(n_m)=(n+8)_M &lt;br>
$$&lt;/p>
&lt;p>The transformation $R: \mathbb{Z} _{24} \to \mathbb{Z} _{24}$ is called the relative operation, and is such that:&lt;/p>
&lt;p>$$
R(n_M)=(n+9)_m \textrm{ and similarly the complementary }
$$&lt;/p>
&lt;p>Though not a generator, the operation $P=(RL)3R$, called the parallel operation, is often considered, and is such that $P(n_M)=n_m$&lt;/p>
&lt;h2 id="trajectories-in-the-tonnetz">Trajectories in the Tonnetz&lt;/h2>
&lt;p>The trajectory is defined as a path $\mathcal{X} $ in the Tonnetz $T$, i.e. an ordered list of positions in the space $T$.&lt;/p>
&lt;p>Let us investigate some basic scenarios for trajectory construction.
Placing the first note in the Tonnetz has no bearing on the descriptors we ultimately compute,
so we can simply pick an arbitrary position. Now we consider the case where we have to place two notes:
one of them is placed as in the previous case, and the second one is placed according to a criterion
depending on a distance measure. To this end, we define a function $dist: \mathbb{Z} _{12} \times \mathbb{Z} _{12} \to \mathbb{N}$,
which assigns to the pitch class representation of notes, $x$ and $y$, their distance according to a given Tonnetz as:
\begin{equation}
dist(x, y) =
\begin{cases}
0 &amp;amp; \text{if } x=y \
1 &amp;amp; \text{if } (x-y)\in T \lor (y-x)\in T \
2 &amp;amp; \text{otherwise} &lt;br>
\end{cases}
\end{equation}
Note that, $ dist(x, y) = dist(y, x) $.
By abuse of notation, from now on when referring to notes or chords we automatically consider the numerical representations of their pitch class (PC). They are defined with integer notation, where $C=0$, $C#=1$, $D=2$, etc. Accordingly, chords are PC sets.&lt;/p>
&lt;p>
&lt;figure id="figure-figure-1--the-representation-of-a-c-major-chord-ie-thepitch-class-set-cmaj--0-4-7-in-four-different-ton-netze-the-notes-of-the-chord-are-illustrated-in-blue-theintermediate-edges-and-notes-connecting-the-chord-repre-sentation-are-denoted-in-red-the-note-c--0-is-alwaysplaced-at-point-0-0">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./figs/Cmaj_Tonnetze.png" alt="C major Tonnetze." loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Figure 1 : The representation of a C major chord, i.e. the
pitch class set Cmaj = {0, 4, 7}, in four different Ton-
netze. The notes of the chord are illustrated in blue. The
intermediate edges and notes (connecting the chord repre-
sentation) are denoted in red. The note C = 0 is always
placed at point (0, 0).
&lt;/figcaption>&lt;/figure>
&lt;/p>
&lt;p>Two notes $x, y$ are neighbors if $dist(x, y)=1$. Thus, in the case where two notes are neighbors we find which kind of interval they form and to which Tonnetz axis this interval corresponds. In the case where $dist(x, y)=2$, we define a positioning according to a shared neighbor.
For example, in Tonnetz $T( 1, 2, 9)$, the placement of note E in relation to note C is computed using the shared neighbor D: D is first placed in relation to C, then E is placed in relation to D. This example is illustrated in Figure 1 (horizontal axis). The intermediate neighbors are denoted in red.&lt;/p>
&lt;p>Given a note $x$ and a position $p$ and a fixed Tonnetz $T$, let $\pi(x, p)$ be a positioning function for $T$ which, from the reference position $p$, places the note $x$ as described above.&lt;/p>
&lt;p>We now move on to chords, which we will demonstrate on the simple case of a triad but generalize as well to chords of any size. In Figure 1 a C major chord is represented in 4 different Tonnetze, $T(1, 3, 8)$, $T(1, 2, 9)$, $T(3, 4, 5)$ and $T(2, 3, 7)$. From this representation we can see that in $T(3, 4, 5)$ the chord forms a connected graph while in the other cases the graph is disconnected. In all representations, we place the note $C= 0$ %\Isa{la notation PC n&amp;rsquo;est pas introduite}
at point $(0, 0)$. From there, we place the other notes based on the Tonnetz intervals and periodicity. For example, we first need to find if E and G are neighbors of C in Tonnetz $T$.
For this we consider the following function, which gives the neighbors in the chord $X$ of note $y$ according to Tonnetz $T$:
\begin{equation}
neigh(y, X, T) =
{ x\in X \mid dist(y, x)=1 \text{ in } T} %, &amp;amp; \text{otherwise}
\end{equation}
In the C major scenario, E and G are neighbors of C in Tonnetz $T(3, 4, 5)$ so we can easily find their place in $T$. We define a function which takes a chord $X$ and a position $p$ in a fixed space $T$ and assigns positions to all notes of $X$ as follows:
\begin{equation}
f(X, p) = { \pi(x, p) \mid x \in X }
\end{equation}&lt;/p>
&lt;p>If a chord does not strictly consist of neighboring notes, we
first place notes which are neighbors of $y$, then we attempt to place the remaining notes according to the newly positioned notes, repeating until no more notes can be placed.
%need to consider a system which, for a note $y$ with corresponding position $p_y$, a chord $X$ and a Tonnetz $T$, first finds the neighbors of $y$ and then the neighbors of each neighbor of $y$ in $T$, etc.
If some notes remain to be placed, then one of the remaining notes is placed in relation to an arbitrary already placed note, and the process is repeated. This process is summarized in Algorithm&lt;/p></description></item><item><title>Music genre descriptor for classification based on Tonnetz trajectories</title><link>https://emmanouil-karystinaios.github.io/publication/music_genre_descriptor/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://emmanouil-karystinaios.github.io/publication/music_genre_descriptor/</guid><description/></item></channel></rss>